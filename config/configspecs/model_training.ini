[experiment]
exp_name = string(max=25)                                   # experiment name
tags = string_list()                                        # optional set of tags
seed = integer(default=-1)                                  # random seed
debug = boolean(default=0)                                  # If True, debugging
train = boolean(default=0)                                  # If True, train model
test = boolean(default=0)                                   # If True, test model
use_comet_logger = boolean(default=0)                       # If True, use Comet ML Logger

[data]              # Data arguments
    [[general]]         # General shared arguments
    dsets = string_list(default=list("vindr_cxr"))          # Dataset/s to load in training/validation
    num_classes = integer(min=1, max=6, default=2)          # Number of classes/labels
    img_mode = integer(min=1, max=3, default=3)             # Number of image channels to load
    label_col = string(max=25, default="Has Finding")      # Name of binary metadata column to use as binary label

    [[training]]        # Training-related arguments
    train_test_split = float(min=0, max=1, default=0.75)    # Prop. of total data to leave for training & validation, rest for testing
    train_val_split = float(min=0, max=1, default=0.75)     # Prop. of data after removing test for training, rest for validation
    cross_val_folds = integer(min=1, default=1)             # If >1, perform K-Fold cross-validation
    stratify_train_val_split = boolean(default=0)           # If True, perform stratified validation split
    force_train_ids = string_list()                         # List of IDs to force to be part of training

    [[augment]]         # Augmentations during training
    augment_training = boolean(default=0)                   # If True, adding augmentations during training pre-DataLoader
    crop_scale = float(min=0.01, max=1.0, default=0.3)      # Lower bound on proportion of area cropped relative to the full image.

    [[dataloader]]      # Dataloader-related arguments
    batch_size = integer(min=1, default=16)                 # Batch size
    shuffle = boolean(default=0)                            # If True, shuffling data
    num_workers = integer(min=0, default=4)                 # Number of CPU workers
    imbalanced_sampler = boolean(default=0)                 # If True, perform imbalanced sampling

[model]
    [[model]]              # Model arguments
    model_provider = option("torchvision", "timm", default="torchvision")   # Name of package containing model architecture implementation
    model_name = string(max=25, default="convnext_base")    # Name of model

    [[training]]            # Training arguments
    checkpoint = boolean(default=1)                         # If True, performing checkpointing
    early_stopping = boolean(default=0)                     # If True, perform early stopping on validation loss
    precision = option("16", "bf16", "16-mixed", "bf16-mixed", "32", default="16-mixed")    # Model precision
    stop_epoch = integer(min=1, default=10)                 # Number of epochs
    use_mixup_aug = boolean(default=0)                      # If True, use MixUp augmentation during training post-DataLoader

    [[optim]]               # Optimization parameters
    optimizer = option("sgd", "adamw", default="adamw")     # Optimizer of choice
    lr = float(min=0.000001, default=0.001)                 # Learning rate
    weight_decay = float(min=0, default=0.001)              # Weight decay
    momentum = float(min=0, default=0.9)                    # SGD momentum
    grad_clip_norm = float(min=0, default=1.0)              # Gradient clipping norm
    swa = boolean(default=1)                                # If True, performing Stochastic Weight Averaging
    accum_batches = integer(min=1, default=1)               # Number of batches to accumulate gradient over to increase effective batch size

    [[misc]]                # Miscellaneous arguments
    torch_compile = boolean(default=0)                      # If True, using `torch.compile` on model
